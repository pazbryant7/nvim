---@diagnostic disable: undefined-global

return {
	s('fori', {
		t('for (let '),
		i(1, 'i'),
		t(' = 0; '),
		t('i < '),
		i(2, 'array.length'),
		t('; i++) {'),
		t({ '', '\t' }),
		i(3),
		t({ '', '}' }),
		i(0),
	}),

	s('forof', {
		t('for (const '),
		i(1, 'item'),
		t(' of '),
		i(2, 'iterable'),
		t(') {'),
		t({ '', '\t' }),
		i(3),
		t({ '', '}' }),
		i(0),
	}),

	s('forin', {
		t('for (const '),
		i(1, 'key'),
		t(' in '),
		i(2, 'object'),
		t(') {'),
		t({ '', '\t' }),
		i(3),
		t({ '', '}' }),
		i(0),
	}),

	s('wh', {
		t('while ('),
		i(1, 'condition'),
		t(') {'),
		t({ '', '\t' }),
		i(2),
		t({ '', '}' }),
		i(0),
	}),

	s('dowh', {
		t('do {'),
		t({ '', '\t' }),
		i(1),
		t({ '', '} while (' }),
		i(2, 'condition'),
		t(');'),
		i(0),
	}),

	s('if', {
		t('if ('),
		i(1, 'condition'),
		t(') {'),
		t({ '', '\t' }),
		i(2),
		t({ '', '}' }),
		i(0),
	}),

	s('ife', {
		t('if ('),
		i(1, 'condition'),
		t(') {'),
		t({ '', '\t' }),
		i(2),
		t({ '', '} else {' }),
		t({ '', '\t' }),
		i(3),
		t({ '', '}' }),
		i(0),
	}),

	s('ifei', {
		t('if ('),
		i(1, 'condition1'),
		t(') {'),
		t({ '', '\t' }),
		i(2),
		t({ '', '} else if (' }),
		i(3, 'condition2'),
		t(') {'),
		t({ '', '\t' }),
		i(4),
		t({ '', '} else {' }),
		t({ '', '\t' }),
		i(5),
		t({ '', '}' }),
		i(0),
	}),

	s('sw', {
		t('switch ('),
		i(1, 'expression'),
		t(') {'),
		t({ '', '\tcase ' }),
		i(2, 'value'),
		t({ ':', '\t\t' }),
		i(3),
		t({ '', '\t\tbreak;' }),
		t({ '', '' }),
		t({ '', '\tdefault:' }),
		t({ '', '\t\t' }),
		i(4),
		t({ '', '\t\tbreak;' }),
		t({ '', '}' }),
		i(0),
	}),

	s('cls', {
		t('class '),
		i(1, 'MyClass'),
		t(' {'),
		t({ '', '\t' }),
		t('constructor('),
		i(2, 'args'),
		t(') {'),
		t({ '', '\t\t' }),
		i(3),
		t({ '', '\t}' }),
		t({ '', '}' }),
		i(0),
	}),

	s('clse', {
		t('class '),
		i(1, 'ChildClass'),
		t(' extends '),
		i(2, 'ParentClass'),
		t(' {'),
		t({ '', '\t' }),
		t('constructor('),
		i(3, 'args'),
		t(') {'),
		t({ '', '\t\t' }),
		t('super('),
		rep(3),
		t(');'),
		t({ '', '\t\t' }),
		i(4),
		t({ '', '\t}' }),
		t({ '', '}' }),
		i(0),
	}),

	s('fn', {
		t('function '),
		i(1, 'myFunction'),
		t('('),
		i(2, 'params'),
		t(') {'),
		t({ '', '\t' }),
		i(3),
		t({ '', '}' }),
		i(0),
	}),

	s('fne', {
		t('const '),
		i(1, 'myFunction'),
		t(' = function('),
		i(2, 'params'),
		t(') {'),
		t({ '', '\t' }),
		i(3),
		t({ '', '};' }),
		i(0),
	}),

	s('afn', {
		t('const '),
		i(1, 'myFunction'),
		t(' = ('),
		i(2, 'params'),
		t(') => {'),
		t({ '', '\t' }),
		i(3),
		t({ '', '};' }),
		i(0),
	}),

	s('iife', {
		t('(() => {'),
		t({ '', '\t' }),
		i(1, '// code to run immediately'),
		t({ '', '})();' }),
		i(0),
	}),

	s('clg', {
		t('console.log('),
		i(1),
		t(')'),
		i(2),
	}),
}
